/*
 * Copyright 2016 Michael Murray
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.almostrealism.raytracer;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import com.almostrealism.raytracer.engine.*;
import org.almostrealism.color.ColorProducer;
import org.almostrealism.color.RGB;
import org.almostrealism.space.Scene;
import org.almostrealism.space.ShadableSurface;
import org.almostrealism.swing.Event;
import org.almostrealism.swing.EventGenerator;
import org.almostrealism.swing.EventHandler;
import org.almostrealism.swing.EventListener;
import org.almostrealism.swing.displays.ProgressDisplay;
import org.almostrealism.texture.GraphicsConverter;

import com.almostrealism.projection.OrthographicCamera;
import com.almostrealism.raytracer.event.SceneCloseEvent;
import com.almostrealism.raytracer.event.SceneOpenEvent;
import com.almostrealism.raytracer.event.SurfaceEditEvent;
import com.almostrealism.raytracer.primitives.SurfaceUI;
import org.almostrealism.util.Factory;
import sun.java2d.Surface;

/**
 * A {@link RenderPanel} object allows display of scene previews and
 * rendered images of the {@link Scene} object it uses.
 * 
 * @author  Michael Murray
 */
public class RenderPanel<T extends Scene<? extends ShadableSurface>> extends JPanel implements EventListener, EventGenerator {
	public static final boolean enableCompaction = true;

	private T scene;
	private EventHandler handler;

	private boolean showProgressWindow;

	private int width, height, ssWidth, ssHeight;

	private ColorProducer renderedImageData[][];
	private Image renderedImage;

	private Thread evaluationThread;
	
	/** Constructs a new {@link RenderPanel} that can be used to render the specified {@link Scene}. */
	public RenderPanel(T scene) {
		super(new java.awt.FlowLayout());
		
		this.scene = scene;
		
		double ph = this.getProjectionHeight();
		double pw = this.getProjectionWidth();
		int w = 320;
		
		this.setImageWidth(w);
		this.setImageHeight((int)(ph * (w / pw)));
		this.setSupersampleWidth(2);
		this.setSupersampleHeight(2);
		
		this.setShowProgressWindow(true);
	}
	
	/**
	 * Starts a {@link Thread} which renders the {@link Scene}. The {@link ColorProducer}
	 * array is generated by this thread, but the producers are evaluated in the
	 * {@link #evaluateImage()} method which is called on completion (and also upon some
	 * types of edit events).
	 */
	public synchronized void render() {
		int totalPixels = this.getImageWidth() * this.getImageHeight();
		if (totalPixels == 0) {
			System.out.println("Image size is zero");
			return;
		}

		if (evaluationThread != null) {
			System.out.println("Please wait until the current render is evaluated");
			return;
		}

		final ProgressDisplay display = new ProgressDisplay(totalPixels / 100, totalPixels);
		final JButton cancelButton = new JButton("Cancel");
		
		JFrame frame = null;
		
		if (this.showProgressWindow == true) {
			frame = new JFrame("Rendering...");
			frame.setSize(300, 80);
			
			frame.getContentPane().setLayout(new java.awt.FlowLayout());
			frame.getContentPane().add(display);
			frame.getContentPane().add(cancelButton);
		} else {
			this.clearRenderedImage();
			
			display.setRemoveOnCompletion(true);
			this.add(display);
			this.add(cancelButton);
		}

		final JFrame fframe = frame;
		
		final Thread renderThread = new Thread(new Runnable() {
			public void run() {
				RenderParameters rparams = new RenderParameters();
				rparams.width = RenderPanel.this.width;
				rparams.height = RenderPanel.this.height;
				rparams.dx = RenderPanel.this.width;
				rparams.dy = RenderPanel.this.height;
				rparams.ssWidth = RenderPanel.this.ssWidth;
				rparams.ssHeight = RenderPanel.this.ssHeight;

				RayTracedScene r = new RayTracedScene(new RayIntersectionEngine((Scene<ShadableSurface>) scene, rparams), scene.getCamera());
				renderedImageData = r.realize(rparams).evaluate(null);

				if (enableCompaction) {
					System.out.print("Compacting image data producer pipeline...");

					for (int i = 0; i < renderedImageData.length; i++) {
						for (int j = 0; j < renderedImageData[i].length; j++) {
							renderedImageData[i][j].compact();
						}

						if (i % 10 == 0) System.out.print(".");
					}

					System.out.println(" Done");
				}

				if (fframe != null) fframe.setVisible(false);

				evaluateImage();
			}
		});
		
		cancelButton.addActionListener((e) -> {
			renderThread.stop();
			System.gc();

			if (renderThread.isInterrupted()) {
				if (fframe != null) fframe.setVisible(false);
				RenderPanel.this.removeAll();
				RenderPanel.this.revalidate();
				RenderPanel.this.repaint();
			}
		});
		
		if (this.showProgressWindow) {
			frame.setVisible(true);
		}
		
		renderThread.start();
	}
	
	public Dimension getPreferredSize() {
		return new Dimension(width, height);
	}

	public synchronized void evaluateImage() {
		if (evaluationThread != null) return;

		evaluationThread = new Thread(() -> {
			renderedImage = GraphicsConverter.convertToAWTImage(renderedImageData);

			evaluationThread = null;

			try {
				SwingUtilities.invokeAndWait(() -> {
					RenderPanel.this.removeAll();
					revalidate();
					repaint();
				});
			} catch(InterruptedException ie) {
				System.out.println("Swing Utilities Interruption: " + ie.toString());
			} catch(java.lang.reflect.InvocationTargetException ite) {
				System.out.println("Swing Utilities Invocation Target Error: " + ite.toString());
			}
		});

		evaluationThread.start();
	}

	/**
	 * Removes any stored image data from this {@link RenderPanel} and repaints the panel.
	 *
	 * @see  #repaint()
	 */
	public void clearRenderedImage() {
		this.renderedImageData = null;
		this.renderedImage = null;
		this.repaint();
	}
	
	/** Method called when an event has been fired. */
	public void eventFired(Event event) {
		if (event instanceof SceneOpenEvent) {
			this.scene = (T) ((SceneOpenEvent) event).getScene();
			this.clearRenderedImage();
		} else if (event instanceof SceneCloseEvent) {
			this.scene = null;
			this.clearRenderedImage();
		}
		
		if (event instanceof SurfaceEditEvent) {
			SurfaceEditEvent se = (SurfaceEditEvent) event;

			if (se.isNameChangeEvent()) {
				return;
			} else if (se.isLocationChangeEvent()) {
				render();
			} else if (se.isSizeChangeEvent()) {
				render();
			} else if (se.isScaleCoefficientChangeEvent()) {
				render();
			} else if (se.isRotationCoefficientChangeEvent()) {
				render();
			} else if (se.isTransformationChangeEvent()) {
				render();
			} else if (se.isColorChangeEvent()) {
				evaluateImage();
			} else if (se.isShadingOptionChangeEvent()) {
				render();
			} else if (se.isDataChangeEvent()) {
				render();
			}
		}
	}

	/** Returns the {@link Scene} that this {@link RenderPanel} displays. */
	public T getScene() { return scene; }

	/**
	 * Sets the width in pixels of the image that will be rendered by this {@link RenderPanel}.
	 */
	public void setImageWidth(int width) { this.width = width; }
	
	/**
	 * Sets the height in pixels of the image that will be rendered by this {@link RenderPanel}.
	 */
	public void setImageHeight(int height) { this.height = height; }
	
	/**
	 * Sets the super sampling width of the image that will be rendered by this RenderPanel.
	 */
	public void setSupersampleWidth(int width) { this.ssWidth = width; }
	
	/**
	 * Sets the super sampling height of the image that will be rendered by this RenderPanel.
	 */
	public void setSupersampleHeight(int height) { this.ssHeight = height; }
	
	/**
	 * @return  The projection width of the Camera object stored by this RenderPanel.
	 */
	public double getProjectionWidth() {
		if (this.scene.getCamera() instanceof OrthographicCamera)
			return ((OrthographicCamera) scene.getCamera()).getProjectionWidth();
		else
			return 0.0;
	}
	
	/**
	 * @return  The projection height of the Camera object stored by this RenderPanel object.
	 */
	public double getProjectionHeight() {
		if (this.scene.getCamera() instanceof OrthographicCamera)
			return ((OrthographicCamera) scene.getCamera()).getProjectionHeight();
		else
			return 0.0;
	}
	
	/**
	 * When set to true, rendering progress will be displayed in a new window.
	 * Otherwise, the progress will be displayed within this RenderPanel's window.
	 *
	 * TODO  With live rendering, this does not function properly if set to false
	 */
	protected void setShowProgressWindow(boolean show) { this.showProgressWindow = show; }
		
	/**
	 * Returns the width, in pixels, of the image that will be rendered by this RenderPanel object.
	 */
	public int getImageWidth() { return this.width; }
	
	/**
	 * Returns the height, in pixels, of the image that will be rendered by this RenderPanel object.
	 */
	public int getImageHeight() { return this.height; }
	
	/**
	 * Returns the supersampling width of the image that will be rendered by this RenderPanel object.
	 */
	public int getSupersampleWidth() { return this.ssWidth; }
	
	/**
	 * Returns the supersampling height of the image that will be rendered by this RenderPanel object.
	 */
	public int getSupersampleHeight() { return this.ssHeight; }
	
	/**
	 * Returns true if rendering progress will be displayed in a new window.
	 * Otherwise, false is returned and the progress will be displayed within this RenderPanel's window.
	 */
	public boolean getShowProgressWindow() { return this.showProgressWindow; }
	
	/**
	 * Return the image rendered by this RenderPanel as an array of RGB objects.
	 */
	public ColorProducer[][] getRenderedImageData() { return this.renderedImageData; }
	
	/**
	 * Sets the EventHandler object used by this RenderPanel object. Setting this to null will deactivae event reporting.
	 */
	public void setEventHandler(EventHandler handler) { this.handler = handler; }
	
	/**
	 * Returns the EventHandler object used by this RenderPanel object.
	 */
	public EventHandler getEventHandler() { return this.handler; }
	
	public double calculateAverageBrightness() {
		return LegacyRayTracingEngine.calculateAverageBrightness(this.scene, this.width, this.height, 3);
	}
	
	/** Method called when painting this RenderPanel. */
	public void paint(Graphics g) {
		if (this.renderedImage != null) {
			g.setColor(Color.black);
			g.fillRect(0, 0, this.getWidth(), this.getHeight());
			g.drawImage(this.renderedImage, 0, 0, this);
		} else {
			g.setColor(Color.black);
			g.fillRect(0, 0, this.getWidth(), this.getHeight());
			
			if (this.scene != null) {
				for (ShadableSurface surface : scene) {
					if (surface instanceof SurfaceUI) {
						((SurfaceUI) surface).draw(g, scene.getCamera());
					}
				}
			}
			
			super.paint(g);
		}
	}
}
