/*
 * Copyright 2020 Michael Murray
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.almostrealism.raytracer;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import com.almostrealism.raytrace.FogParameters;
import com.almostrealism.raytrace.RayIntersectionEngine;
import com.almostrealism.raytrace.RenderParameters;
import org.almostrealism.color.RealizableImage;
import org.almostrealism.color.ColorEvaluable;
import org.almostrealism.color.RGB;
import org.almostrealism.space.Scene;
import org.almostrealism.space.ShadableSurface;
import org.almostrealism.swing.Event;
import org.almostrealism.swing.EventGenerator;
import org.almostrealism.swing.EventHandler;
import org.almostrealism.swing.EventListener;
import org.almostrealism.texture.GraphicsConverter;

import org.almostrealism.projection.OrthographicCamera;
import com.almostrealism.event.SceneCloseEvent;
import com.almostrealism.event.SceneOpenEvent;
import com.almostrealism.event.SurfaceEditEvent;
import com.almostrealism.primitives.SurfaceUI;
import io.almostrealism.relation.Pipeline;
import io.almostrealism.relation.Evaluable;

/**
 * A {@link RenderPanel} object allows display of {@link Scene} previews and
 * rendered images of the {@link Scene} it uses.
 * 
 * @author  Michael Murray
 */
public class RenderPanel<T extends Scene<? extends ShadableSurface>> extends JPanel implements EventListener, EventGenerator, Pipeline {
	private T scene;
	private EventHandler handler;

	private int width, height, ssWidth, ssHeight;

	private RealizableImage image;
	private RGB renderedImageData[][];
	private Image renderedImage;

	private Thread evaluationThread;
	private boolean imageEvaluated;
	private long evaluationStart = -1;
	
	/** Constructs a new {@link RenderPanel} that can be used to render the specified {@link Scene}. */
	public RenderPanel(T scene) {
		super(new java.awt.FlowLayout());
		
		this.scene = scene;
		
		double ph = this.getProjectionHeight();
		double pw = this.getProjectionWidth();
		int w = 320;
		// int w = 440;
		// int w = 60;
		
		this.setImageWidth(w);
		this.setImageHeight((int)(ph * (w / pw)));
		this.setSupersampleWidth(1);
		this.setSupersampleHeight(1);
	}
	
	/**
	 * Starts a {@link Thread} which renders the {@link Scene}. The {@link ColorEvaluable}
	 * array is generated by this thread, but the producers are evaluated in the
	 * {@link #evaluateImage()} method which is called on completion (and also upon some
	 * types of edit events).
	 */
	public synchronized void render() {
		int totalPixels = this.getImageWidth() * this.getImageHeight();
		if (totalPixels == 0) {
			System.out.println("Image size is zero");
			return;
		}

		if (evaluationThread != null) {
			System.out.println("Please wait until the current render is evaluated");
			return;
		}

		JFrame frame = null;

		final Thread renderThread = new Thread(() -> {
				RenderParameters rparams = new RenderParameters();
				rparams.width = RenderPanel.this.width;
				rparams.height = RenderPanel.this.height;
				rparams.dx = RenderPanel.this.width;
				rparams.dy = RenderPanel.this.height;
				rparams.ssWidth = RenderPanel.this.ssWidth;
				rparams.ssHeight = RenderPanel.this.ssHeight;

				RayTracedScene r = new RayTracedScene(new RayIntersectionEngine(scene, new FogParameters()), scene.getCamera(), rparams);
				image = r.realize(rparams);

				evaluateImage();
			});
		
		renderThread.start();
	}

	@Override
	public Dimension getPreferredSize() {
		return new Dimension(width, height);
	}

	public synchronized void evaluateImage() {
		if (evaluationThread != null) return;

		evaluationThread = new Thread(() -> {
			evaluationStart = System.currentTimeMillis();
			renderedImageData = image.get().evaluate();
			System.out.println("Completed image realization after " + (System.currentTimeMillis() - evaluationStart) + " msec");

			renderedImage = GraphicsConverter.convertToAWTImage(renderedImageData, RenderPanel.this);
			imageEvaluated = true;
			evaluationThread = null;
			System.out.println("Completed image display after " + (System.currentTimeMillis() - evaluationStart) + " msec");
		});

		evaluationThread.start();
	}

	public boolean isImageEvaluated() {
		return imageEvaluated;
	}

	/**
	 * Removes any stored image data from this {@link RenderPanel} and repaints the panel.
	 *
	 * @see  #repaint()
	 */
	public void clearRenderedImage() {
		this.image = null;
		this.renderedImage = null;
		this.repaint();
	}
	
	/** Method called when an event has been fired. */
	@Override
	public void eventFired(Event event) {
		if (event instanceof SceneOpenEvent) {
			this.scene = (T) ((SceneOpenEvent) event).getScene();
			this.clearRenderedImage();
		} else if (event instanceof SceneCloseEvent) {
			this.scene = null;
			this.clearRenderedImage();
		}
		
		if (event instanceof SurfaceEditEvent) {
			SurfaceEditEvent se = (SurfaceEditEvent) event;

			if (se.isNameChangeEvent()) {
				return;
			} else if (se.isLocationChangeEvent()) {
				render();
			} else if (se.isSizeChangeEvent()) {
				render();
			} else if (se.isScaleCoefficientChangeEvent()) {
				render();
			} else if (se.isRotationCoefficientChangeEvent()) {
				render();
			} else if (se.isTransformationChangeEvent()) {
				render();
			} else if (se.isColorChangeEvent()) {
				evaluateImage();
			} else if (se.isShadingOptionChangeEvent()) {
				render();
			} else if (se.isDataChangeEvent()) {
				render();
			}
		}
	}

	/** Returns the {@link Scene} that this {@link RenderPanel} displays. */
	public T getScene() { return scene; }

	/**
	 * Sets the width in pixels of the image that will be rendered by this {@link RenderPanel}.
	 */
	public void setImageWidth(int width) { this.width = width; }
	
	/**
	 * Sets the height in pixels of the image that will be rendered by this {@link RenderPanel}.
	 */
	public void setImageHeight(int height) { this.height = height; }
	
	/**
	 * Sets the super sampling width of the image that will be rendered by this RenderPanel.
	 */
	public void setSupersampleWidth(int width) { this.ssWidth = width; }
	
	/**
	 * Sets the super sampling height of the image that will be rendered by this RenderPanel.
	 */
	public void setSupersampleHeight(int height) { this.ssHeight = height; }
	
	/**
	 * @return  The projection width of the Camera object stored by this RenderPanel.
	 */
	public double getProjectionWidth() {
		if (this.scene.getCamera() instanceof OrthographicCamera)
			return ((OrthographicCamera) scene.getCamera()).getProjectionWidth();
		else
			return 0.0;
	}
	
	/**
	 * @return  The projection height of the Camera object stored by this RenderPanel object.
	 */
	public double getProjectionHeight() {
		if (this.scene.getCamera() instanceof OrthographicCamera)
			return ((OrthographicCamera) scene.getCamera()).getProjectionHeight();
		else
			return 0.0;
	}
		
	/**
	 * Returns the width, in pixels, of the image that will be rendered by this RenderPanel object.
	 */
	public int getImageWidth() { return this.width; }
	
	/**
	 * Returns the height, in pixels, of the image that will be rendered by this RenderPanel object.
	 */
	public int getImageHeight() { return this.height; }
	
	/**
	 * Returns the supersampling width of the image that will be rendered by this RenderPanel object.
	 */
	public int getSupersampleWidth() { return this.ssWidth; }
	
	/**
	 * Returns the supersampling height of the image that will be rendered by this RenderPanel object.
	 */
	public int getSupersampleHeight() { return this.ssHeight; }
	
	/** Returns the {@link Evaluable} for the {@link RGB}s that make up the image for this {@link RenderPanel}. */
	public RealizableImage getRealizableImage() { return this.image; }

	/** Returns the {@link RGB}s that make up the image for this {@link RenderPanel}. */
	public RGB[][] getRenderedImageData() { return renderedImageData; }

	/** Returns the {@link Image} rendered by this {@link RenderPanel}. */
	public Image getRenderedImage() { return renderedImage; }

	/**
	 * Sets the EventHandler object used by this {@link RenderPanel}. Setting this to null will deactivae event reporting.
	 */
	@Override
	public void setEventHandler(EventHandler handler) { this.handler = handler; }
	
	/**
	 * Returns the {@link EventHandler} used by this {@link RenderPanel}.
	 */
	@Override
	public EventHandler getEventHandler() { return this.handler; }

	@Deprecated
	public double calculateAverageBrightness() {
		return LegacyRayTracingEngine.calculateAverageBrightness(this.scene, this.width, this.height, 3);
	}
	
	/** Method called when painting this RenderPanel. */
	@Override
	public void paint(Graphics g) {
		if (this.renderedImage != null) {
			g.setColor(Color.black);
			g.fillRect(0, 0, this.getWidth(), this.getHeight());
			g.drawImage(this.renderedImage, 0, 0, this);
		} else {
			g.setColor(Color.black);
			g.fillRect(0, 0, this.getWidth(), this.getHeight());
			
			if (this.scene != null) {
				for (ShadableSurface surface : scene) {
					if (surface instanceof SurfaceUI) {
						((SurfaceUI) surface).draw(g, scene.getCamera());
					}
				}
			}
			
			super.paint(g);
		}
	}

	/** Update the displayed image to the first element of the specified argument. */
	@Override
	public Evaluable<Object> get() {
		return images -> {
			renderedImage = (Image) images[0];

			// System.out.println("Repainting RenderPanel with " + renderedImage);

			try {
				SwingUtilities.invokeAndWait(() -> {
					RenderPanel.this.removeAll();
					revalidate();
					repaint();
				});
			} catch(InterruptedException ie) {
				System.out.println("Swing Utilities Interruption: " + ie);
			} catch(java.lang.reflect.InvocationTargetException ite) {
				System.out.println("Swing Utilities Invocation Target Error: " + ite.toString());
			}

			if (evaluationStart > 0) {
				long mins = (System.currentTimeMillis() - evaluationStart) / 60000;
				System.out.println("Repainted RenderPanel (" + mins + " evaluation minutes elapsed)");
			} else {
				System.out.println("Repainted RenderPanel");
			}

			return renderedImage;
		};
	}
}
